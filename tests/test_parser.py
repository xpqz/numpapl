import pytest 

from apl import APL

def parse_only(src):
    p = APL(parse_only=True)
    ast = p.parse(src)

    if ast is None:
        return None

    return str(ast)

test_data = [
    ("1 +⍨ 2", "((0, ((1, ('+', '⍨')), 2)),)"),
    ("a (+⍤1 0) b", "(-1, -1, -1, (2, 'a'), ((1, ('(', ('+', ('⍤', (1, 0))))), ((2, 'b'), (-1, -1))))"),
    ("var←99", "((0, (('var', '←'), 99)),)"),
    ("v←⍳99 ⋄ s←+⌿v", "(-1, -1, -1, (15, ((('v', '←'), ('⍳', 99)), '⋄')), ((1, (('s', '←'), ('+', '⌿'))), ((2, 'v'), (-1, -1))))"),
    ("⎕IO←0", "((0, (('⎕IO', '←'), 0)),)"),
    ("1 2 3 ⌊⍥≢ 1 2 3 4", "((0, ((((1, 2), 3), ('⌊', ('⍥', '≢'))), (((1, 2), 3), 4))),)"),
    ("a ← -b ← 3", "((0, (('a', '←'), ('-', (('b', '←'), 3)))),)"),
    ("{⍺+⍵}", "((1, ('{', (('⍺', '+'), '⍵'))),)"),
    ("Add←{⍺+⍵}", "((1, (('Add', '←'), ('{', (('⍺', '+'), '⍵')))),)"),
    ("a←3 {⍺+⍵} 1 2 3 4", "((0, (('a', '←'), ((3, ('{', (('⍺', '+'), '⍵'))), (((1, 2), 3), 4)))),)"),
    ("1 {⍺+⍵} 2", "((0, ((1, ('{', (('⍺', '+'), '⍵'))), 2)),)"),
    ("1 A 2", "(-1, -1, -1, (0, 1), ((2, 'A'), ((0, 2), (-1, -1))))"),
    ("1 a 2", "(-1, -1, -1, (0, 1), ((2, 'a'), ((0, 2), (-1, -1))))"),
    ("{⍺+⍵}/⍳8", "((0, ((('{', (('⍺', '+'), '⍵')), '/'), ('⍳', 8))),)"),
    ("Add←{⍺+⍵}⋄Add⌿⍳8", "(-1, -1, -1, (15, ((('Add', '←'), ('{', (('⍺', '+'), '⍵'))), '⋄')), ((2, 'Add'), ((3, '⌿'), ((0, ('⍳', 8)), (-1, -1)))))"),
    ("2 3⍴⍬", "((0, (((2, 3), '⍴'), '⍬')),)"),
    ("a[2]←5", "((0, (('a', (('[', 2), '←')), 5)),)"),
    ("a[2 2 3]←5 8 7", "((0, (('a', (('[', ((2, 2), 3)), '←')), ((5, 8), 7))),)"),
    ("a[2 3]", "((2, ('a', ('[', (2, 3)))),)"),
    ("1 2 3 4[2]", "((0, ((((1, 2), 3), 4), ('[', 2))),)"),
    ("(1 2 3 4)[2]", "((0, (('(', (((1, 2), 3), 4)), ('[', 2))),)"),
    ("a[1] b[2] c[3]", "((2, (('a', ('[', 1)), (('b', ('[', 2)), ('c', ('[', 3))))),)"),
    ("(a[1] b[2] c)[1]", "((2, (('(', (('a', ('[', 1)), (('b', ('[', 2)), 'c'))), ('[', 1))),)"),
    ("a←2 2⍴1 2 3 4⋄a[(1 0)(0 0)]", "(-1, -1, -1, (15, ((('a', '←'), (((2, 2), '⍴'), (((1, 2), 3), 4))), '⋄')), ((2, ('a', ('[', (('(', (1, 0)), ('(', (0, 0)))))), (-1, (-1, -1))))"),
    ("'c'", "((0, array(['c'], dtype='<U1')),)"),
    ("a←'hello world'", "((0, (('a', '←'), array(['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd'], dtype='<U1'))),)"),
    ("'abcd'~'bde'", "((0, ((array(['a', 'b', 'c', 'd'], dtype='<U1'), '~'), array(['b', 'd', 'e'], dtype='<U1'))),)"),
    ("''", "((0, array([], dtype='<U1')),)"),
    ("1 - 2 - 3 - 4", "((0, ((1, '-'), ((2, '-'), ((3, '-'), 4)))),)")
]

@pytest.mark.parametrize("test_input,expected", test_data)
def test_eval(test_input, expected):
    assert parse_only(test_input) == expected
